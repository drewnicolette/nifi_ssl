- name: Check NiFi Package Exists
  stat:
    path: "{{ destination_path }}/nifi-{{ nifi_version }}-bin.tar.gz"
  register: stat_result

- name: Download NiFi package
  shell: "wget {{ nifi_url }} -P {{ destination_path }}"
  when: not stat_result.stat.exists

- name: Unarchive NiFi Tarball
  unarchive:
    src: "{{ destination_path }}/nifi-{{ nifi_version }}-bin.tar.gz"
    dest: "{{ destination_path }}"
    remote_src: yes

- name: Copy P12 Keystore to Remote Server
  copy:
    src: "./certificates/{{ inventory_hostname }}_keystore.p12"
    dest: "{{ nifi_home }}/conf"
    mode: '0755'
  when: keystore_type == "PKCS12"

- name: Copy JKS Keystore to Remote Server
  copy:
    src: "./certificates/{{ inventory_hostname }}_keystore.jks"
    dest: "{{ nifi_home }}/conf"
    mode: '0755'
  when: keystore_type == "JKS"

- name: Copy Truststore to Remote Server
  copy:
    src: "./certificates/{{ truststore_file_name }}"
    dest: "{{ nifi_home }}/conf"
    mode: '0755'

- name: Create Zookeper state dir
  file:
    path: "{{ nifi_home }}/state/zookeeper"
    state: directory

- name: Create Zookeper state file
  file:
    path: "{{ nifi_home }}/state/zookeeper/myid"
    state: touch
    mode: '0777'

- name: Add ID to myid file
  shell: "hostname | tr -d [:alpha:] | cut -c1 > {{ nifi_home }}/state/zookeeper/myid"

- name: Configure NiFi Authorizers File for HTTPS
  template:
    src: authorizers.xml.j2
    dest: "{{ nifi_home }}/conf/authorizers.xml"
    mode: '0755'

- name: Configure NiFi Identity File for HTTPS
  template:
    src: login-identity-providers.xml.j2
    dest: "{{ nifi_home }}/conf/login-identity-providers.xml"
    mode: '0755'

- name: Configure NiFi Properties File for HTTPS
  template:
    src: nifi.properties.j2
    dest: "{{ nifi_home }}/conf/nifi.properties"
    mode: '0755'

- name: Configure Zookeeper Properties File for HTTPS
  template:
    src: zookeeper.properties.j2
    dest: "{{ nifi_home }}/conf/zookeeper.properties"
    mode: '0755'

- name: Configure NiFi Service File
  template:
    src: nifi.service.j2
    dest: /etc/systemd/system/nifi.service
    mode: '0755'

- name: Start NiFi
  shell: "systemctl start nifi"
